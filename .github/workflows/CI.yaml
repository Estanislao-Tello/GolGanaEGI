name: Build 🐳 · Push · Patch Manifests

on:
  push:
    branches: [dev]

env:
  DOCKER_USER: ${{ secrets.CR_USER }}                    # usuario de Docker Hub
  REGISTRY: docker.io
  IMAGE_FRONT: ${{ secrets.CR_USER }}/front
  IMAGE_BACK:  ${{ secrets.CR_USER }}/back

jobs:
  build-push-patch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    # 1) Checkout del repo de código (este mismo)
    - uses: actions/checkout@v4

    # 2) Builder + login a Docker Hub
    - name: Set up Buildx
      uses: docker/setup-buildx-action@v3                       # ﻿:contentReference[oaicite:0]{index=0}

    - name: Login Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.CR_USER }}
        password: ${{ secrets.CR_PAT }}

    # 3) Build & push FRONTEND  —► tag *dev* (se sobreescribe en cada push)
    - name: Build & push frontend
      id: build_front
      uses: docker/build-push-action@v5                         # ﻿:contentReference[oaicite:1]{index=1}
      with:
        context: ./appdemo/frontend
        file: ./appdemo/frontend/Dockerfile
        push: true
        tags: ${{ env.IMAGE_FRONT }}:latest

    # 4) Build & push BACKEND
    - name: Build & push backend
      id: build_back
      uses: docker/build-push-action@v5
      with:
        context: ./appdemo/backend
        file: ./appdemo/backend/Dockerfile
        push: true
        tags: ${{ env.IMAGE_BACK }}:latest

    # 5) Exportar los digests como variables de entorno
    - name: Export image digests
      run: |
        echo "DIGEST_FRONT=${{ steps.build_front.outputs.digest }}" >> $GITHUB_ENV
        echo "DIGEST_BACK=${{ steps.build_back.outputs.digest }}"  >> $GITHUB_ENV

    # 6) Clonar el repo de manifiestos
    - name: Checkout manifests repo
      uses: actions/checkout@v4
      with:
        repository: Estanislao-Tello/ManifiestosEGI              # repo destino
        token: ${{ secrets.GIT_PAT }}                      # PAT con permiso de push
        path: manifests

    # 7) Actualizar overlays/dev/patch-images.yaml
    - name: Bump patch-images.yaml
      run: |
        cd manifests/ManifiestosEGI/overlays/dev              # <-- ruta correcta
    
        # instalar yq (ligero)
        sudo curl -sSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
        sudo chmod +x /usr/local/bin/yq
    
        # fijar tag 'latest' y el nuevo digest en cada imagen
        yq -i '
          (.images[] | select(.name=="front")).newTag    = "latest" |
          (.images[] | select(.name=="front")).newDigest = env.DIGEST_FRONT |
          (.images[] | select(.name=="back")).newTag     = "latest" |
          (.images[] | select(.name=="back")).newDigest  = env.DIGEST_BACK
        ' patch-images.yaml
    
    # 8) Commit & push SOLO si hubo cambios reales
    - name: Commit & push manifests
      run: |
        cd manifests                                # <-- de nuevo, la misma carpeta
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        if ! git diff --quiet; then
          git add ManifiestosEGI/overlays/dev/patch-images.yaml
          git commit -m "ci(dev): update digests for tag latest"
          git push origin main                      # o la rama que uses
        else
          echo "Sin cambios en patch-images.yaml — nada que commitear."
        fi

