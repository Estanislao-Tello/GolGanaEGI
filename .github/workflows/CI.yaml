# .github/workflows/ci-dev.yaml
# ------------------------------------------------------------------
# Build üê≥ ¬∑ Push ¬∑ Patch Manifests (dev)
# ------------------------------------------------------------------

name: Build üê≥ ¬∑ Push ¬∑ Patch Manifests (dev)

on:
  push:
    branches: [dev]            # solo la rama dev

env:
  # ‚á£‚á£ CAMBIA estos valores a los tuyos ‚á£‚á£
  REGISTRY: docker.io          # Docker Hub; deja vac√≠o si prefieres ‚Äúdocker.io/‚Äù impl√≠cito
  IMAGE_FRONT: ignaciosa/front
  IMAGE_BACK:  ignaciosa/back
  MANIFESTS_REPO: Estanislao-Tello/ManifiestosEGI
  PATCH_FILE: ManifiestosEGI/overlays/dev/patch-images.yaml

jobs:
  build-push-patch:
    runs-on: ubuntu-latest
    permissions:
      contents: read            # clonar tu repo de c√≥digo
      packages: write           # subir im√°genes (no usado en Docker Hub, pero lo dejamos)

    steps:
      # 1) Checkout de tu c√≥digo fuente (rama dev)
      - name: Checkout source
        uses: actions/checkout@v4

      # 2) Calcular el pr√≥ximo tag v<n> (basado en n¬∫ de commits)
      - name: Compute version tag
        id: meta
        run: |
          commits=$(git rev-list --count HEAD)
          echo "tag=v$commits" >> "$GITHUB_OUTPUT"

      # 3) Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4) Login a Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CR_USER }}   # tu usuario de Docker Hub
          password: ${{ secrets.CR_PAT }}    # Access Token / contrase√±a

      # 5) Build & push üî∏ Frontend üî∏
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./appdemo/frontend       # ‚Üô ajusta la ruta si es necesario
          push: true
          tags: |
            ${{ env.IMAGE_FRONT }}:${{ steps.meta.outputs.tag }}

      # 6) Build & push üîπ Backend üîπ
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./appdemo/backend        # ‚Üô ajusta la ruta si es necesario
          push: true
          tags: |
            ${{ env.IMAGE_BACK }}:${{ steps.meta.outputs.tag }}

      # 7) Checkout del repo de manifiestos en ./manifests
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFESTS_REPO }}
          token: ${{ secrets.GIT_PAT }}      # PAT con permiso de push
          path: manifests

      # 8) Instalar yq v4 (para editar YAML)
      - name: Install yq
        run: |
          sudo wget -q https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 \
            -O /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

      # 9) Actualizar los tags en patch-images.yaml
      - name: Patch image tags in overlay/dev
        env:
          NEW_TAG:  ${{ steps.meta.outputs.tag }}
          IMG_FRONT: ${{ env.IMAGE_FRONT }}
          IMG_BACK:  ${{ env.IMAGE_BACK }}
        working-directory: manifests
        run: |
          yq -i '
            walk(
              if type == "!!str" and
                 ([env(IMG_FRONT), env(IMG_BACK)] | any(startswith(.)))
              then sub(":[^:@]+$", ":" + env(NEW_TAG))
              else .
              end
            )' "$PATCH_FILE"

      # 10) Commit & push si hubo cambios
      - name: Commit and push patch
        working-directory: manifests
        run: |
          git config user.email "actions@github.com"
          git config user.name  "github-actions"
          if git status --porcelain | grep .; then
            git add "$PATCH_FILE"
            git commit -m "ci(dev): update image tag to ${{ steps.meta.outputs.tag }} [skip ci]"
            git push
          else
            echo "No hay cambios que commitear"
          fi
