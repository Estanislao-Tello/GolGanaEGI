# .github/workflows/cd-main.yaml
# -------------------------------------------------------------------
# Promote latest v<n> image to prod manifests  (main branch)
# -------------------------------------------------------------------

name: Promote to Prod (main)

on:
  push:
    branches: [main]

env:
  IMAGE_FRONT: ignaciosa/front
  IMAGE_BACK:  ignaciosa/back
  MANIFESTS_REPO: Estanislao-Tello/ManifiestosEGI
  PATCH_FILE: ManifiestosEGI/overlays/prod/patch-images.yaml

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
    # 1) Obtener el último v<n> de Docker Hub
    - name: Determine latest version tag
      id: version
      env:
        REPO: ${{ env.IMAGE_FRONT }}
      run: |
        API="https://registry.hub.docker.com/v2/repositories/${REPO}/tags?page_size=100"
        latest=$(curl -s "$API" \
                 | grep -o '"name":"v[0-9]\+"' \
                 | sed -E 's/"name":"(v[0-9]+)"/\1/' \
                 | sort -V | tail -n1)
        if [ -z "$latest" ]; then
          echo "❌  No se encontró ningún tag v* en Docker Hub"; exit 1
        fi
        echo "Último tag encontrado: $latest"
        echo "tag=$latest" >> "$GITHUB_OUTPUT"

    # 2) Clonar el repo de manifiestos
    - name: Checkout manifests repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.MANIFESTS_REPO }}
        token: ${{ secrets.GIT_PAT }}     # PAT con permiso de push
        path: manifests

    # 3) Instalar yq
    - name: Install yq
      run: |
        sudo wget -q https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 \
          -O /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

    # 4) Parchear patch-images.yaml con el nuevo tag
    - name: Patch prod manifest
      working-directory: manifests
      env:
        TAG:   ${{ steps.version.outputs.tag }}
        PATCH: ${{ env.PATCH_FILE }}
      run: |
        yq e -i '
          select(.metadata.name == "pagina-web")
          .spec.template.spec.containers[].image = "ignaciosa/front:" + env(TAG)
        ' "$PATCH"

        yq e -i '
          select(.metadata.name == "backend")
          .spec.template.spec.containers[].image = "ignaciosa/back:" + env(TAG)
        ' "$PATCH"

    # 5) Commit & push si hubo cambios
    - name: Commit and push
      working-directory: manifests
      env:
        TAG: ${{ steps.version.outputs.tag }}
      run: |
        git config user.email "actions@github.com"
        git config user.name  "github-actions"
        if git status --porcelain | grep .; then
          git add "$PATCH_FILE"
          git commit -m "cd(prod): promote ${TAG} [skip ci]"
          git push
        else
          echo "No hay cambios que commitear"
        fi
